name: Vecinapp CI/CD with Enhanced ClickUp Integration

on:
  push:
    branches: [ main, develop, feature/*, release/*, hotfix/* ]
  pull_request:
    types: [ opened, closed, merged, synchronize, reopened ]
  issues:
    types: [ opened, closed, reopened, assigned, labeled ]
  schedule:
    - cron: '0 9 * * MON'  # Reporte semanal cada lunes
    - cron: '0 12 * * FRI'  # Reporte de fin de semana cada viernes

jobs:
  # JOB 1: An√°lisis de c√≥digo y calidad
  analyze-code:
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    outputs:
      code_quality: ${{ steps.code-quality.outputs.result }}
      complexity: ${{ steps.complexity.outputs.result }}
      tech_debt: ${{ steps.tech-debt.outputs.result }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Analyze code quality
        id: code-quality
        run: |
          # An√°lisis b√°sico de calidad de c√≥digo
          KOTLIN_FILES=$(find . -name "*.kt" | wc -l)
          XML_FILES=$(find . -name "*.xml" | wc -l)
          
          # Detectar code smells b√°sicos
          LONG_METHODS=$(grep -r "fun " --include="*.kt" . | awk '{print length}' | awk '$1 > 100' | wc -l)
          LARGE_CLASSES=$(grep -r "class " --include="*.kt" . | awk '{print length}' | awk '$1 > 500' | wc -l)
          
          # Calcular puntuaci√≥n b√°sica de calidad (0-100)
          if [ $KOTLIN_FILES -gt 0 ]; then
            QUALITY_SCORE=$((100 - ($LONG_METHODS + $LARGE_CLASSES) * 5))
            if [ $QUALITY_SCORE -lt 0 ]; then
              QUALITY_SCORE=0
            fi
          else
            QUALITY_SCORE=100
          fi
          
          # Determinar nivel de calidad
          if [ $QUALITY_SCORE -ge 90 ]; then
            QUALITY_LEVEL="üü¢ Excelente"
          elif [ $QUALITY_SCORE -ge 70 ]; then
            QUALITY_LEVEL="üü° Buena"
          elif [ $QUALITY_SCORE -ge 50 ]; then
            QUALITY_LEVEL="üü† Regular"
          else
            QUALITY_LEVEL="üî¥ Necesita mejoras"
          fi
          
          echo "result=$QUALITY_LEVEL ($QUALITY_SCORE/100)" >> $GITHUB_OUTPUT

      - name: Analyze code complexity
        id: complexity
        run: |
          # An√°lisis b√°sico de complejidad
          TOTAL_LINES=$(find . -name "*.kt" -o -name "*.java" | xargs cat | wc -l)
          COMMENT_LINES=$(find . -name "*.kt" -o -name "*.java" | xargs grep -c "//\|/\*\|\*/\|^\s*\*" || echo 0)
          
          # Calcular ratio de comentarios
          if [ $TOTAL_LINES -gt 0 ]; then
            COMMENT_RATIO=$(( $COMMENT_LINES * 100 / $TOTAL_LINES ))
          else
            COMMENT_RATIO=0
          fi
          
          # Determinar nivel de complejidad
          if [ $COMMENT_RATIO -lt 10 ]; then
            COMPLEXITY_LEVEL="üî¥ Alta (pocos comentarios)"
          elif [ $COMMENT_RATIO -lt 20 ]; then
            COMPLEXITY_LEVEL="üü† Media"
          else
            COMPLEXITY_LEVEL="üü¢ Baja (bien documentado)"
          fi
          
          echo "result=$COMPLEXITY_LEVEL ($COMMENT_RATIO% comentado)" >> $GITHUB_OUTPUT

      - name: Analyze technical debt
        id: tech-debt
        run: |
          # Buscar indicadores de deuda t√©cnica
          TODO_COUNT=$(grep -r "TODO\|FIXME" --include="*.kt" --include="*.java" . | wc -l)
          DEPRECATED_COUNT=$(grep -r "@Deprecated" --include="*.kt" --include="*.java" . | wc -l)
          
          # Calcular puntuaci√≥n de deuda t√©cnica
          TECH_DEBT_SCORE=$(( $TODO_COUNT + $DEPRECATED_COUNT ))
          
          # Determinar nivel de deuda t√©cnica
          if [ $TECH_DEBT_SCORE -eq 0 ]; then
            TECH_DEBT_LEVEL="üü¢ Sin deuda t√©cnica visible"
          elif [ $TECH_DEBT_SCORE -lt 5 ]; then
            TECH_DEBT_LEVEL="üü° Deuda t√©cnica baja"
          elif [ $TECH_DEBT_SCORE -lt 15 ]; then
            TECH_DEBT_LEVEL="üü† Deuda t√©cnica moderada"
          else
            TECH_DEBT_LEVEL="üî¥ Deuda t√©cnica alta"
          fi
          
          echo "result=$TECH_DEBT_LEVEL ($TECH_DEBT_SCORE items)" >> $GITHUB_OUTPUT

  # JOB 2: Integraci√≥n mejorada con ClickUp
  enhanced-clickup-integration:
    runs-on: ubuntu-latest
    needs: analyze-code
    if: github.event_name != 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get commit details
        id: commit-details
        if: github.event_name == 'push'
        run: |
          echo "message=$(git log -1 --pretty=format:%s)" >> $GITHUB_OUTPUT
          echo "author=$(git log -1 --pretty=format:%an)" >> $GITHUB_OUTPUT
          echo "email=$(git log -1 --pretty=format:%ae)" >> $GITHUB_OUTPUT
          echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          echo "files_changed=$(git diff --name-only HEAD^ HEAD | wc -l)" >> $GITHUB_OUTPUT
          echo "lines_added=$(git diff --numstat HEAD^ HEAD | awk '{sum+=$1} END {print sum}')" >> $GITHUB_OUTPUT
          echo "lines_removed=$(git diff --numstat HEAD^ HEAD | awk '{sum+=$2} END {print sum}')" >> $GITHUB_OUTPUT
          echo "commit_time=$(git log -1 --pretty=format:%ci)" >> $GITHUB_OUTPUT
          
          # Determinar tipo de commit basado en el mensaje
          if echo "${{ github.event.head_commit.message }}" | grep -qi "^feat\|^feature\|nueva funcionalidad"; then
            echo "commit_type=‚ú® Feature" >> $GITHUB_OUTPUT
          elif echo "${{ github.event.head_commit.message }}" | grep -qi "^fix\|^bug\|^error\|^crash"; then
            echo "commit_type=üêõ Fix" >> $GITHUB_OUTPUT
          elif echo "${{ github.event.head_commit.message }}" | grep -qi "^docs\|documentaci√≥n\|^doc"; then
            echo "commit_type=üìö Docs" >> $GITHUB_OUTPUT
          elif echo "${{ github.event.head_commit.message }}" | grep -qi "^style\|^formato\|^ui"; then
            echo "commit_type=üíÑ Style" >> $GITHUB_OUTPUT
          elif echo "${{ github.event.head_commit.message }}" | grep -qi "^refactor\|^refactorizaci√≥n"; then
            echo "commit_type=‚ôªÔ∏è Refactor" >> $GITHUB_OUTPUT
          elif echo "${{ github.event.head_commit.message }}" | grep -qi "^test\|^prueba"; then
            echo "commit_type=üß™ Test" >> $GITHUB_OUTPUT
          elif echo "${{ github.event.head_commit.message }}" | grep -qi "^chore\|^build\|^ci"; then
            echo "commit_type=üîß Chore" >> $GITHUB_OUTPUT
          else
            echo "commit_type=üîÑ Update" >> $GITHUB_OUTPUT
          fi

      - name: Determine Vecinapp components changed
        id: vecinapp-components
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        run: |
          # Detectar componentes espec√≠ficos de Vecinapp
          COMPONENTS=""
          ASSIGNEE_ID="null"
          
          if git diff --name-only ${{ github.event_name == 'push' && 'HEAD^ HEAD' || format('origin/{0} HEAD', github.base_ref) }} | grep -q "MainActivity.kt\|VecinalNavHost.kt"; then
            COMPONENTS="$COMPONENTS\n- üèóÔ∏è Componentes core"
            # Asignar al responsable de arquitectura
            ASSIGNEE_ID="null"  # Reemplazar con ID real
          fi
          
          if git diff --name-only ${{ github.event_name == 'push' && 'HEAD^ HEAD' || format('origin/{0} HEAD', github.base_ref) }} | grep -q "Authentication"; then
            COMPONENTS="$COMPONENTS\n- üîê Sistema de autenticaci√≥n"
            # Asignar al responsable de seguridad
            ASSIGNEE_ID="null"  # Reemplazar con ID real
          fi
          
          if git diff --name-only ${{ github.event_name == 'push' && 'HEAD^ HEAD' || format('origin/{0} HEAD', github.base_ref) }} | grep -q "Navigation"; then
            COMPONENTS="$COMPONENTS\n- üß≠ Sistema de navegaci√≥n"
            # Asignar al responsable de UX
            ASSIGNEE_ID="null"  # Reemplazar con ID real
          fi
          
          if git diff --name-only ${{ github.event_name == 'push' && 'HEAD^ HEAD' || format('origin/{0} HEAD', github.base_ref) }} | grep -q "Firebase"; then
            COMPONENTS="$COMPONENTS\n- üî• Integraci√≥n con Firebase"
            # Asignar al responsable de backend
            ASSIGNEE_ID="null"  # Reemplazar con ID real
          fi
          
          if git diff --name-only ${{ github.event_name == 'push' && 'HEAD^ HEAD' || format('origin/{0} HEAD', github.base_ref) }} | grep -q "UI\|Components"; then
            COMPONENTS="$COMPONENTS\n- üé® Componentes de UI"
            # Asignar al responsable de UI
            ASSIGNEE_ID="null"  # Reemplazar con ID real
          fi
          
          if git diff --name-only ${{ github.event_name == 'push' && 'HEAD^ HEAD' || format('origin/{0} HEAD', github.base_ref) }} | grep -q "Model\|Data"; then
            COMPONENTS="$COMPONENTS\n- üíæ Modelo de datos"
            # Asignar al responsable de datos
            ASSIGNEE_ID="null"  # Reemplazar con ID real
          fi
          
          if git diff --name-only ${{ github.event_name == 'push' && 'HEAD^ HEAD' || format('origin/{0} HEAD', github.base_ref) }} | grep -q "Test"; then
            COMPONENTS="$COMPONENTS\n- üß™ Tests"
            # Asignar al responsable de QA
            ASSIGNEE_ID="null"  # Reemplazar con ID real
          fi
          
          # Si no se detectaron cambios espec√≠ficos
          if [ -z "$COMPONENTS" ]; then
            COMPONENTS="\n- üîÑ Otros cambios en el c√≥digo"
          fi
          
          echo "components=$COMPONENTS" >> $GITHUB_OUTPUT
          echo "assignee_id=$ASSIGNEE_ID" >> $GITHUB_OUTPUT

      - name: Create or update ClickUp task
        run: |
          # Determinar el t√≠tulo, descripci√≥n y estado seg√∫n el tipo de evento
          if [ "${{ github.event_name }}" == "push" ]; then
            # Formatear t√≠tulo seg√∫n tipo de commit
            COMMIT_TYPE="${{ steps.commit-details.outputs.commit_type }}"
            COMMIT_MSG="${{ steps.commit-details.outputs.message }}"
            BRANCH="${{ steps.commit-details.outputs.branch }}"
          
            if [ ${#COMMIT_MSG} -gt 50 ]; then
              TITLE="[Vecinapp] $COMMIT_TYPE en $BRANCH: ${COMMIT_MSG:0:47}..."
            else
              TITLE="[Vecinapp] $COMMIT_TYPE en $BRANCH: $COMMIT_MSG"
            fi
          
            # Crear descripci√≥n enriquecida
            DESC="## üìù Detalles del Commit\\n\\n"
            DESC="${DESC}**üî§ Commit:** ${{ steps.commit-details.outputs.message }}\\n"
            DESC="${DESC}**üë§ Autor:** ${{ steps.commit-details.outputs.author }} (${{ steps.commit-details.outputs.email }})\\n"
            DESC="${DESC}**üåø Branch:** ${{ steps.commit-details.outputs.branch }}\\n"
            DESC="${DESC}**üè¢ Repo:** Vecinapp\\n"
            DESC="${DESC}**‚è∞ Fecha:** ${{ steps.commit-details.outputs.commit_time }}\\n\\n"
          
            DESC="${DESC}## üß© Componentes modificados\\n${{ steps.vecinapp-components.outputs.components }}\\n\\n"
          
            DESC="${DESC}## üìä Estad√≠sticas\\n\\n"
            DESC="${DESC}- **üìÅ Archivos modificados:** ${{ steps.commit-details.outputs.files_changed }}\\n"
            DESC="${DESC}- **‚ûï L√≠neas a√±adidas:** ${{ steps.commit-details.outputs.lines_added }}\\n"
            DESC="${DESC}- **‚ûñ L√≠neas eliminadas:** ${{ steps.commit-details.outputs.lines_removed }}\\n\\n"
          
            DESC="${DESC}## üîç An√°lisis de c√≥digo\\n\\n"
            DESC="${DESC}- **üõ°Ô∏è Calidad del c√≥digo:** ${{ needs.analyze-code.outputs.code_quality }}\\n"
            DESC="${DESC}- **üß† Complejidad:** ${{ needs.analyze-code.outputs.complexity }}\\n"
            DESC="${DESC}- **üí∏ Deuda t√©cnica:** ${{ needs.analyze-code.outputs.tech_debt }}\\n\\n"
          
            DESC="${DESC}## üîó Enlaces\\n\\n"
            DESC="${DESC}**üìé Commit:** [Ver en GitHub](https://github.com/${{ github.repository }}/commit/${{ github.sha }})\\n"
            DESC="${DESC}**üìä CI/CD:** [Ver resultados](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          
            STATUS="in progress"
          
            # Determinar etiquetas seg√∫n tipo de commit y branch
            if [[ "$COMMIT_TYPE" == *"Feature"* ]]; then
              TAGS='["vecinapp", "commit", "feature", "${{ steps.commit-details.outputs.branch }}"]'
            elif [[ "$COMMIT_TYPE" == *"Fix"* ]]; then
              TAGS='["vecinapp", "commit", "fix", "${{ steps.commit-details.outputs.branch }}"]'
            elif [[ "$COMMIT_TYPE" == *"Refactor"* ]]; then
              TAGS='["vecinapp", "commit", "refactor", "${{ steps.commit-details.outputs.branch }}"]'
            else
              TAGS='["vecinapp", "commit", "${{ steps.commit-details.outputs.branch }}"]'
            fi
          
            # Determinar prioridad basada en el tipo de commit
            if [[ "$COMMIT_TYPE" == *"Fix"* ]]; then
              PRIORITY=1  # Urgente para fixes
            elif [[ "$COMMIT_TYPE" == *"Feature"* ]]; then
              PRIORITY=2  # Alta para features
            else
              PRIORITY=3  # Normal para otros
            fi
          
            # Estimar tiempo basado en cambios y complejidad
            TOTAL_CHANGES=$(( ${{ steps.commit-details.outputs.lines_added }} + ${{ steps.commit-details.outputs.lines_removed }} ))
          
            if [ $TOTAL_CHANGES -gt 500 ]; then
              TIME_ESTIMATE=28800000  # 8 horas en ms
            elif [ $TOTAL_CHANGES -gt 200 ]; then
              TIME_ESTIMATE=14400000  # 4 horas en ms
            elif [ $TOTAL_CHANGES -gt 50 ]; then
              TIME_ESTIMATE=7200000   # 2 horas en ms
            else
              TIME_ESTIMATE=3600000   # 1 hora en ms
            fi
          
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            # Formatear t√≠tulo para PR
            PR_TITLE="${{ github.event.pull_request.title }}"
          
            # Determinar tipo de PR
            if echo "$PR_TITLE" | grep -qi "feature\|feat\|nueva"; then
              PR_TYPE="‚ú® Feature"
            elif echo "$PR_TITLE" | grep -qi "fix\|bug\|error\|crash"; then
              PR_TYPE="üêõ Fix"
            elif echo "$PR_TITLE" | grep -qi "refactor"; then
              PR_TYPE="‚ôªÔ∏è Refactor"
            else
              PR_TYPE="üîÑ PR"
            fi
          
            TITLE="[Vecinapp] $PR_TYPE: $PR_TITLE"
          
            # Crear descripci√≥n enriquecida para PR
            DESC="## üîÑ Detalles del Pull Request\\n\\n"
            DESC="${DESC}**üìù T√≠tulo:** ${{ github.event.pull_request.title }}\\n"
            DESC="${DESC}**üë§ Autor:** ${{ github.event.pull_request.user.login }}\\n"
            DESC="${DESC}**üîÑ Estado:** ${{ github.event.action }}\\n"
            DESC="${DESC}**üè¢ Repo:** Vecinapp\\n"
          
            if [ ! -z "${{ github.event.pull_request.body }}" ]; then
              DESC="${DESC}\\n## üìÑ Descripci√≥n del PR\\n\\n${{ github.event.pull_request.body }}\\n"
            fi
          
            DESC="${DESC}\\n## üß© Componentes modificados\\n${{ steps.vecinapp-components.outputs.components }}\\n\\n"
          
            DESC="${DESC}## üîç An√°lisis de c√≥digo\\n\\n"
            DESC="${DESC}- **üõ°Ô∏è Calidad del c√≥digo:** ${{ needs.analyze-code.outputs.code_quality }}\\n"
            DESC="${DESC}- **üß† Complejidad:** ${{ needs.analyze-code.outputs.complexity }}\\n"
            DESC="${DESC}- **üí∏ Deuda t√©cnica:** ${{ needs.analyze-code.outputs.tech_debt }}\\n\\n"
          
            DESC="${DESC}## üîó Enlaces\\n\\n"
            DESC="${DESC}**üìé Pull Request:** [Ver en GitHub](${{ github.event.pull_request.html_url }})\\n"
            DESC="${DESC}**üìä CI/CD:** [Ver resultados](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          
            # Determinar estado seg√∫n acci√≥n del PR
            if [ "${{ github.event.action }}" == "opened" ] || [ "${{ github.event.action }}" == "reopened" ]; then
              STATUS="to do"
            elif [ "${{ github.event.action }}" == "synchronize" ]; then
              STATUS="in progress"
            elif [ "${{ github.event.action }}" == "closed" ]; then
              if [ "${{ github.event.pull_request.merged }}" == "true" ]; then
                STATUS="complete"
                DESC="${DESC}\\n\\n## ‚úÖ Resultado\\n\\n**Merged:** ‚úÖ PR fusionado exitosamente"
              else
                STATUS="closed"
                DESC="${DESC}\\n\\n## ‚ùå Resultado\\n\\n**Merged:** ‚ùå PR cerrado sin fusionar"
              fi
            else
              STATUS="in progress"
            fi
          
            # Determinar etiquetas seg√∫n tipo de PR
            if echo "$PR_TITLE" | grep -qi "feature\|feat\|nueva"; then
              TAGS='["vecinapp", "pull-request", "feature", "${{ github.event.action }}"]'
            elif echo "$PR_TITLE" | grep -qi "fix\|bug\|error\|crash"; then
              TAGS='["vecinapp", "pull-request", "fix", "${{ github.event.action }}"]'
            elif echo "$PR_TITLE" | grep -qi "refactor"; then
              TAGS='["vecinapp", "pull-request", "refactor", "${{ github.event.action }}"]'
            else
              TAGS='["vecinapp", "pull-request", "${{ github.event.action }}"]'
            fi
          
            # Determinar prioridad seg√∫n tipo de PR
            if echo "$PR_TITLE" | grep -qi "fix\|bug\|error\|crash\|urgent"; then
              PRIORITY=1  # Urgente para fixes
            elif echo "$PR_TITLE" | grep -qi "feature\|feat\|nueva"; then
              PRIORITY=2  # Alta para features
            else
              PRIORITY=3  # Normal para otros
            fi
          
            # Tiempo estimado para revisi√≥n de PR
            TIME_ESTIMATE=21600000  # 6 horas en ms
          
          elif [ "${{ github.event_name }}" == "issues" ]; then
            # Determinar tipo de issue
            if echo "${{ github.event.issue.title }} ${{ toJson(github.event.issue.labels) }}" | grep -qi "bug\|error\|crash\|fallo"; then
              ISSUE_TYPE="üêõ Bug"
              PRIORITY=1  # Urgente para bugs
              TAGS='["vecinapp", "issue", "bug", "${{ github.event.action }}"]'
            elif echo "${{ github.event.issue.title }} ${{ toJson(github.event.issue.labels) }}" | grep -qi "feature\|enhancement\|mejora"; then
              ISSUE_TYPE="‚ú® Feature"
              PRIORITY=2  # Alta para features
              TAGS='["vecinapp", "issue", "feature", "${{ github.event.action }}"]'
            elif echo "${{ github.event.issue.title }} ${{ toJson(github.event.issue.labels) }}" | grep -qi "question\|pregunta\|duda"; then
              ISSUE_TYPE="‚ùì Pregunta"
              PRIORITY=3  # Normal para preguntas
              TAGS='["vecinapp", "issue", "question", "${{ github.event.action }}"]'
            else
              ISSUE_TYPE="üìã Issue"
              PRIORITY=3  # Normal para otros
              TAGS='["vecinapp", "issue", "${{ github.event.action }}"]'
            fi
          
            TITLE="[Vecinapp] $ISSUE_TYPE: ${{ github.event.issue.title }}"
          
            # Crear descripci√≥n enriquecida para issue
            DESC="## üìã Detalles del Issue\\n\\n"
            DESC="${DESC}**üìù T√≠tulo:** ${{ github.event.issue.title }}\\n"
            DESC="${DESC}**üë§ Reportado por:** ${{ github.event.issue.user.login }}\\n"
            DESC="${DESC}**üîÑ Estado:** ${{ github.event.action }}\\n"
            DESC="${DESC}**üè¢ Repo:** Vecinapp\\n"
          
            if [ ! -z "${{ github.event.issue.body }}" ]; then
              DESC="${DESC}\\n## üìÑ Descripci√≥n\\n\\n${{ github.event.issue.body }}\\n"
            fi
          
            # A√±adir etiquetas si existen
            if [ ! -z "${{ toJson(github.event.issue.labels) }}" ] && [ "${{ toJson(github.event.issue.labels) }}" != "[]" ]; then
              DESC="${DESC}\\n## üè∑Ô∏è Etiquetas\\n\\n${{ toJson(github.event.issue.labels) }}\\n"
            fi
          
            DESC="${DESC}\\n## üîó Enlaces\\n\\n"
            DESC="${DESC}**üìé Issue:** [Ver en GitHub](${{ github.event.issue.html_url }})"
          
            # Determinar estado seg√∫n acci√≥n del issue
            if [ "${{ github.event.action }}" == "opened" ] || [ "${{ github.event.action }}" == "reopened" ]; then
              STATUS="to do"
            elif [ "${{ github.event.action }}" == "assigned" ]; then
              STATUS="in progress"
            elif [ "${{ github.event.action }}" == "closed" ]; then
              STATUS="complete"
            else
              STATUS="in progress"
            fi
          
            # Tiempo estimado para issues
            if [[ "$ISSUE_TYPE" == *"Bug"* ]]; then
              TIME_ESTIMATE=21600000  # 6 horas para bugs
            elif [[ "$ISSUE_TYPE" == *"Feature"* ]]; then
              TIME_ESTIMATE=36000000  # 10 horas para features
            else
              TIME_ESTIMATE=10800000  # 3 horas para otros
            fi
          
          else
            TITLE="[Vecinapp] üîÑ Evento: ${{ github.event_name }}"
            DESC="**üîÑ Evento:** ${{ github.event_name }}\\n**üë§ Actor:** ${{ github.actor }}\\n**üè¢ Repo:** Vecinapp"
            STATUS="to do"
            TAGS='["vecinapp", "other"]'
            PRIORITY=3
            TIME_ESTIMATE=7200000  # 2 horas en ms
          fi
          
          # Buscar si ya existe una tarea con este t√≠tulo (para actualizar en lugar de crear nueva)
          if [ "${{ github.event_name }}" == "pull_request" ] || [ "${{ github.event_name }}" == "issues" ]; then
            SEARCH_TERM="$TITLE"
          
            TASK_ID=$(curl -s -G "https://api.clickup.com/api/v2/list/901312972197/task" \
              --data-urlencode "name=$SEARCH_TERM" \
              -H "Authorization: ${{ secrets.CLICKUP_API_TOKEN }}" | \
              jq -r '.tasks[0].id')
          
            if [ "$TASK_ID" != "null" ] && [ ! -z "$TASK_ID" ]; then
              # Actualizar tarea existente
              echo "Actualizando tarea existente: $TASK_ID"
              curl -X PUT "https://api.clickup.com/api/v2/task/$TASK_ID" \
                -H "Content-Type: application/json" \
                -H "Authorization: ${{ secrets.CLICKUP_API_TOKEN }}" \
                -d "{
                  \"name\": \"$TITLE\",
                  \"status\": \"$STATUS\",
                  \"description\": \"$DESC\\n\\n**üîÑ Actualizado:** $(date)\",
                  \"priority\": $PRIORITY,
                  \"time_estimate\": $TIME_ESTIMATE
                }"
          
              # A√±adir comentario sobre la actualizaci√≥n
              curl -X POST "https://api.clickup.com/api/v2/task/$TASK_ID/comment" \
                -H "Content-Type: application/json" \
                -H "Authorization: ${{ secrets.CLICKUP_API_TOKEN }}" \
                -d "{
                  \"comment_text\": \"## üîÑ Actualizaci√≥n autom√°tica\\n\\n**Evento:** ${{ github.event_name }}\\n**Acci√≥n:** ${{ github.event.action }}\\n**Fecha:** $(date)\",
                  \"notify_all\": true
                }"
            else
              # Crear nueva tarea
              echo "Creando nueva tarea"
              curl -X POST "https://api.clickup.com/api/v2/list/901312972197/task" \
                -H "Content-Type: application/json" \
                -H "Authorization: ${{ secrets.CLICKUP_API_TOKEN }}" \
                -d "{
                  \"name\": \"$TITLE\",
                  \"description\": \"$DESC\",
                  \"status\": \"$STATUS\",
                  \"tags\": $TAGS,
                  \"priority\": $PRIORITY,
                  \"time_estimate\": $TIME_ESTIMATE,
                  \"assignees\": [\"${{ steps.vecinapp-components.outputs.assignee_id }}\"],
                  \"notify_all\": true
                }"
            fi
          else
            # Para commits, siempre crear nueva tarea
            echo "Creando nueva tarea para commit"
            curl -X POST "https://api.clickup.com/api/v2/list/901312972197/task" \
              -H "Content-Type: application/json" \
              -H "Authorization: ${{ secrets.CLICKUP_API_TOKEN }}" \
              -d "{
                \"name\": \"$TITLE\",
                \"description\": \"$DESC\",
                \"status\": \"$STATUS\",
                \"tags\": $TAGS,
                \"priority\": $PRIORITY,
                \"time_estimate\": $TIME_ESTIMATE,
                \"assignees\": [\"${{ steps.vecinapp-components.outputs.assignee_id }}\"],
                \"notify_all\": true
              }"
          fi

  # JOB 3: Compilar y probar Vecinapp
  build-and-test:
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        id: build
        run: ./gradlew assembleDebug
        continue-on-error: true

      - name: Run tests
        id: test
        run: ./gradlew testDebug
        continue-on-error: true

      - name: Run lint
        id: lint
        run: ./gradlew lintDebug
        continue-on-error: true

      - name: Check Firebase configuration
        id: firebase
        run: |
          if [ -f "app/google-services.json" ]; then
            echo "firebase_config=‚úÖ Configuraci√≥n de Firebase presente" >> $GITHUB_OUTPUT
          else
            echo "firebase_config=‚ö†Ô∏è Falta archivo google-services.json" >> $GITHUB_OUTPUT
          fi

      - name: Generate APK info
        id: apk-info
        if: steps.build.outcome == 'success'
        run: |
          APK_PATH=$(find app/build/outputs -name "*.apk" | head -1)
          
          if [ ! -z "$APK_PATH" ]; then
            APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
            echo "apk_size=$APK_SIZE" >> $GITHUB_OUTPUT
            echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
            echo "apk_found=true" >> $GITHUB_OUTPUT
          else
            echo "apk_found=false" >> $GITHUB_OUTPUT
          fi

      - name: Update ClickUp with build results
        run: |
          # Determinar resultado de la compilaci√≥n
          if [ "${{ steps.build.outcome }}" == "success" ]; then
            BUILD_STATUS="‚úÖ Compilaci√≥n exitosa"
          else
            BUILD_STATUS="‚ùå Error de compilaci√≥n"
          fi
          
          # Determinar resultado de las pruebas
          if [ "${{ steps.test.outcome }}" == "success" ]; then
            TEST_STATUS="‚úÖ Tests exitosos"
          else
            TEST_STATUS="‚ùå Tests fallidos"
          fi
          
          # Determinar resultado del lint
          if [ "${{ steps.lint.outcome }}" == "success" ]; then
            LINT_STATUS="‚úÖ Lint exitoso"
          else
            LINT_STATUS="‚ö†Ô∏è Advertencias de lint"
          fi
          
          # Informaci√≥n del APK
          if [ "${{ steps.apk-info.outputs.apk_found }}" == "true" ]; then
            APK_INFO="‚úÖ APK generado (Tama√±o: ${{ steps.apk-info.outputs.apk_size }})"
          else
            APK_INFO="‚ùå No se gener√≥ APK"
          fi
          
          # Buscar la tarea m√°s reciente relacionada con este commit/PR
          if [ "${{ github.event_name }}" == "push" ]; then
            SEARCH_TERM="[Vecinapp] Commit en ${GITHUB_REF#refs/heads/}"
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            SEARCH_TERM="[Vecinapp] PR: ${{ github.event.pull_request.title }}"
          else
            SEARCH_TERM="[Vecinapp]"
          fi
          
          TASK_ID=$(curl -s -G "https://api.clickup.com/api/v2/list/901312972197/task" \
            --data-urlencode "name=$SEARCH_TERM" \
            -H "Authorization: ${{ secrets.CLICKUP_API_TOKEN }}" | \
            jq -r '.tasks[0].id')
          
          if [ "$TASK_ID" != "null" ] && [ ! -z "$TASK_ID" ]; then
            # A√±adir comentario con los resultados de la compilaci√≥n
            curl -X POST "https://api.clickup.com/api/v2/task/$TASK_ID/comment" \
              -H "Content-Type: application/json" \
              -H "Authorization: ${{ secrets.CLICKUP_API_TOKEN }}" \
              -d "{
                \"comment_text\": \"## üöÄ Resultados de CI/CD\\n\\n$BUILD_STATUS\\n$TEST_STATUS\\n$LINT_STATUS\\n$APK_INFO\\n${{ steps.firebase.outputs.firebase_config }}\\n\\n**‚è∞ Ejecutado:** $(date)\\n\\n**üîó [Ver detalles completos](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})**\",
                \"notify_all\": true
              }"
          
            # Actualizar estado de la tarea seg√∫n los resultados
            if [ "${{ steps.build.outcome }}" != "success" ] || [ "${{ steps.test.outcome }}" != "success" ]; then
              curl -X PUT "https://api.clickup.com/api/v2/task/$TASK_ID" \
                -H "Content-Type: application/json" \
                -H "Authorization: ${{ secrets.CLICKUP_API_TOKEN }}" \
                -d "{
                  \"status\": \"bloqueado\"
                }"
            fi
          fi

  # JOB 4: Generar informe semanal mejorado
  enhanced-weekly-report:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Obtener todo el historial

      - name: Generate Vecinapp development stats
        id: stats
        run: |
          # Determinar si es reporte de fin de semana o semanal
          if [ "$(date +%u)" == "5" ]; then
            # Viernes - Reporte de fin de semana
            REPORT_TYPE="fin de semana"
            TIME_PERIOD="3 days"
          else
            # Lunes - Reporte semanal
            REPORT_TYPE="semanal"
            TIME_PERIOD="1 week"
          fi
          
          # Obtener estad√≠sticas del per√≠odo
          COMMITS=$(git log --since="$TIME_PERIOD ago" --oneline | wc -l)
          AUTHORS=$(git log --since="$TIME_PERIOD ago" --format="%an" | sort -u | wc -l)
          FILES=$(git log --since="$TIME_PERIOD ago" --name-only --pretty=format: | sort -u | wc -l)
          
          # Estad√≠sticas espec√≠ficas de Vecinapp
          AUTH_CHANGES=$(git log --since="$TIME_PERIOD ago" --name-only --pretty=format: | grep -c "Authentication" || echo 0)
          NAV_CHANGES=$(git log --since="$TIME_PERIOD ago" --name-only --pretty=format: | grep -c "Navigation" || echo 0)
          FIREBASE_CHANGES=$(git log --since="$TIME_PERIOD ago" --name-only --pretty=format: | grep -c "Firebase" || echo 0)
          UI_CHANGES=$(git log --since="$TIME_PERIOD ago" --name-only --pretty=format: | grep -c "UI\|Components" || echo 0)
          
          # Calcular velocidad de desarrollo
          PREV_PERIOD_COMMITS=$(git log --since="$TIME_PERIOD ago" --until="$TIME_PERIOD ago" --oneline | wc -l)
          if [ $PREV_PERIOD_COMMITS -eq 0 ]; then
            VELOCITY_CHANGE="N/A (sin datos previos)"
          else
            VELOCITY_PERCENT=$(( ($COMMITS - $PREV_PERIOD_COMMITS) * 100 / $PREV_PERIOD_COMMITS ))
            if [ $VELOCITY_PERCENT -gt 0 ]; then
              VELOCITY_CHANGE="‚¨ÜÔ∏è +$VELOCITY_PERCENT% vs per√≠odo anterior"
            elif [ $VELOCITY_PERCENT -lt 0 ]; then
              VELOCITY_CHANGE="‚¨áÔ∏è $VELOCITY_PERCENT% vs per√≠odo anterior"
            else
              VELOCITY_CHANGE="‚û°Ô∏è Sin cambios vs per√≠odo anterior"
            fi
          fi
          
          # Obtener los principales contribuidores
          TOP_CONTRIBUTORS=$(git log --since="$TIME_PERIOD ago" --format="%an" | sort | uniq -c | sort -nr | head -5 | awk '{print "- " $2 " " $3 ": " $1 " commits"}')
          
          # Obtener tipos de commits
          FEATURE_COMMITS=$(git log --since="$TIME_PERIOD ago" --oneline | grep -ci "feat\|feature" || echo 0)
          FIX_COMMITS=$(git log --since="$TIME_PERIOD ago" --oneline | grep -ci "fix\|bug" || echo 0)
          REFACTOR_COMMITS=$(git log --since="$TIME_PERIOD ago" --oneline | grep -ci "refactor" || echo 0)
          OTHER_COMMITS=$(( $COMMITS - $FEATURE_COMMITS - $FIX_COMMITS - $REFACTOR_COMMITS ))
          
          # Calcular salud del proyecto
          if [ $FIX_COMMITS -eq 0 ] || [ $COMMITS -eq 0 ]; then
            FIX_RATIO=0
          else
            FIX_RATIO=$(( $FIX_COMMITS * 100 / $COMMITS ))
          fi
          
          if [ $FIX_RATIO -lt 20 ]; then
            PROJECT_HEALTH="üü¢ Excelente"
          elif [ $FIX_RATIO -lt 40 ]; then
            PROJECT_HEALTH="üü° Buena"
          elif [ $FIX_RATIO -lt 60 ]; then
            PROJECT_HEALTH="üü† Regular"
          else
            PROJECT_HEALTH="üî¥ Necesita atenci√≥n"
          fi
          
          # Guardar todas las variables para el reporte
          echo "report_type=$REPORT_TYPE" >> $GITHUB_OUTPUT
          echo "commits=$COMMITS" >> $GITHUB_OUTPUT
          echo "authors=$AUTHORS" >> $GITHUB_OUTPUT
          echo "files=$FILES" >> $GITHUB_OUTPUT
          echo "auth_changes=$AUTH_CHANGES" >> $GITHUB_OUTPUT
          echo "nav_changes=$NAV_CHANGES" >> $GITHUB_OUTPUT
          echo "firebase_changes=$FIREBASE_CHANGES" >> $GITHUB_OUTPUT
          echo "ui_changes=$UI_CHANGES" >> $GITHUB_OUTPUT
          echo "velocity_change=$VELOCITY_CHANGE" >> $GITHUB_OUTPUT
          echo "feature_commits=$FEATURE_COMMITS" >> $GITHUB_OUTPUT
          echo "fix_commits=$FIX_COMMITS" >> $GITHUB_OUTPUT
          echo "refactor_commits=$REFACTOR_COMMITS" >> $GITHUB_OUTPUT
          echo "other_commits=$OTHER_COMMITS" >> $GITHUB_OUTPUT
          echo "project_health=$PROJECT_HEALTH" >> $GITHUB_OUTPUT
          
          echo "top_contributors<<EOF" >> $GITHUB_OUTPUT
          echo "$TOP_CONTRIBUTORS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Obtener commits recientes para el resumen
          RECENT_COMMITS=$(git log --since="$TIME_PERIOD ago" --pretty=format:"- %ad: %s" --date=short | head -10)
          echo "recent_commits<<EOF" >> $GITHUB_OUTPUT
          echo "$RECENT_COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create enhanced report in ClickUp
        run: |
          REPORT_DATE=$(date +"%Y-%m-%d")
          
          if [ "${{ steps.stats.outputs.report_type }}" == "fin de semana" ]; then
            START_DATE=$(date -d "3 days ago" +"%Y-%m-%d")
            TITLE="üìä Reporte de Fin de Semana Vecinapp: $START_DATE a $REPORT_DATE"
          else
            START_DATE=$(date -d "1 week ago" +"%Y-%m-%d")
            TITLE="üìä Reporte Semanal Vecinapp: $START_DATE a $REPORT_DATE"
          fi
          
          # Crear descripci√≥n enriquecida para el reporte
          DESC="# üìà Reporte de Desarrollo Vecinapp ${{ steps.stats.outputs.report_type }}\\n\\n"
          DESC="${DESC}**üìÖ Periodo:** $START_DATE a $REPORT_DATE\\n\\n"
          
          DESC="${DESC}## üîç Resumen Ejecutivo\\n\\n"
          DESC="${DESC}- **üíª Actividad:** ${{ steps.stats.outputs.commits }} commits por ${{ steps.stats.outputs.authors }} desarrolladores\\n"
          DESC="${DESC}- **üöÄ Velocidad:** ${{ steps.stats.outputs.velocity_change }}\\n"
          DESC="${DESC}- **ü©∫ Salud del proyecto:** ${{ steps.stats.outputs.project_health }}\\n\\n"
          
          DESC="${DESC}## üìä Estad√≠sticas Detalladas\\n\\n"
          DESC="${DESC}### üìù Actividad\\n\\n"
          DESC="${DESC}- **üìÅ Archivos modificados:** ${{ steps.stats.outputs.files }}\\n"
          DESC="${DESC}- **üë• Desarrolladores activos:** ${{ steps.stats.outputs.authors }}\\n"
          DESC="${DESC}- **üìà Commits totales:** ${{ steps.stats.outputs.commits }}\\n\\n"
          
          DESC="${DESC}### üß© Componentes Vecinapp\\n\\n"
          DESC="${DESC}- **üîê Cambios en autenticaci√≥n:** ${{ steps.stats.outputs.auth_changes }}\\n"
          DESC="${DESC}- **üß≠ Cambios en navegaci√≥n:** ${{ steps.stats.outputs.nav_changes }}\\n"
          DESC="${DESC}- **üî• Cambios en Firebase:** ${{ steps.stats.outputs.firebase_changes }}\\n"
          DESC="${DESC}- **üé® Cambios en UI:** ${{ steps.stats.outputs.ui_changes }}\\n\\n"
          
          DESC="${DESC}### üìã Tipos de Commits\\n\\n"
          DESC="${DESC}- **‚ú® Features nuevas:** ${{ steps.stats.outputs.feature_commits }}\\n"
          DESC="${DESC}- **üêõ Fixes de bugs:** ${{ steps.stats.outputs.fix_commits }}\\n"
          DESC="${DESC}- **‚ôªÔ∏è Refactorizaciones:** ${{ steps.stats.outputs.refactor_commits }}\\n"
          DESC="${DESC}- **üîÑ Otros cambios:** ${{ steps.stats.outputs.other_commits }}\\n\\n"
          
          DESC="${DESC}## üë• Principales Contribuidores\\n\\n${{ steps.stats.outputs.top_contributors }}\\n\\n"
          
          DESC="${DESC}## üìù Commits Recientes\\n\\n${{ steps.stats.outputs.recent_commits }}\\n\\n"
          
          DESC="${DESC}## üîÆ Pr√≥ximos Pasos Recomendados\\n\\n"
          
          # Recomendaciones basadas en las estad√≠sticas
          if [ ${{ steps.stats.outputs.fix_commits }} -gt ${{ steps.stats.outputs.feature_commits }} ]; then
            DESC="${DESC}- **üêõ Enfoque en estabilidad:** Considerar una fase de estabilizaci√≥n para reducir el n√∫mero de bugs\\n"
          fi
          
          if [ ${{ steps.stats.outputs.auth_changes }} -gt 0 ]; then
            DESC="${DESC}- **üîê Revisar seguridad:** Se han realizado cambios en el sistema de autenticaci√≥n\\n"
          fi
          
          if [ ${{ steps.stats.outputs.firebase_changes }} -gt 0 ]; then
            DESC="${DESC}- **üî• Verificar Firebase:** Asegurar que los cambios en Firebase est√©n correctamente configurados\\n"
          fi
          
          if [ ${{ steps.stats.outputs.ui_changes }} -gt 0 ]; then
            DESC="${DESC}- **üé® Validar UI:** Realizar pruebas de usabilidad para los cambios de interfaz\\n"
          fi
          
          DESC="${DESC}- **üìù Actualizar documentaci√≥n:** Mantener la documentaci√≥n al d√≠a con los cambios recientes\\n"
          DESC="${DESC}- **üß™ Ampliar cobertura de tests:** Asegurar que los nuevos cambios est√©n cubiertos por tests\\n\\n"
          
          DESC="${DESC}## üîó Enlaces\\n\\n"
          DESC="${DESC}- **üìä [Ver todos los commits](https://github.com/${{ github.repository }}/commits)**\\n"
          DESC="${DESC}- **üìà [Ver estad√≠sticas en GitHub](https://github.com/${{ github.repository }}/pulse)**"
          
          # Crear tarea en ClickUp con el reporte
          curl -X POST "https://api.clickup.com/api/v2/list/901312972197/task" \
            -H "Content-Type: application/json" \
            -H "Authorization: ${{ secrets.CLICKUP_API_TOKEN }}" \
            -d "{
              \"name\": \"$TITLE\",
              \"description\": \"$DESC\",
              \"status\": \"complete\",
              \"tags\": [\"reporte\", \"${{ steps.stats.outputs.report_type }}\", \"vecinapp\"],
              \"priority\": 3,
              \"notify_all\": true
            }"